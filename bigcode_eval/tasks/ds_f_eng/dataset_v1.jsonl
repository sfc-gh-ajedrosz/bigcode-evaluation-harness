{"dataframe_id": "dhirajnirne__bank-marketing.csv", "prompt": "[INST] You will be shown a dataset from a Kaggle competition. The competition is to build a classifier over this dataset such that it has the highest classification accuracy possible. Your task is to preprocess this dataset so that an existing model can improve its classification accuracy. You will be shown a general description of the dataset including a description of the classification task. This will be followed by a list of features and their descriptions. These features are available in a pandas DataFrame. You should output a single function in Python 3.7+ that will take this dataframe as input and return a modified dataframe with new features. New features can be formed by e.g. keeping the old features unchanged, creating interactions between features, preprocessing features, removing features.\n\nDataset description: A database of banking customers and their responses to a marketing campaign. Tries to answer how do banks define target groups for their makreting campaigns so as to maximize their chances of selling a product.\n\nThe goal is to predict if the customer will buy the product or not.\n\nDataframe features and their descriptions:\n{'age': 'Age of the customer.', 'age group': 'What age group does the customer lie in, 10 - 19    =   1, 20   -    29   =   2, 30   -    39   =   3, 40   -    49   =  4, 50   -    59   =   5, 60   -    69   =   6, 70   -     79   =  7, 80   -    89    =  8, 90   -   99    =  9.', 'eligible': 'If the customer is eligible for the talk or not.', 'job': 'What does the customer do?', 'salary': 'Salary of the customer.', 'marital': 'Married or not?', 'education': 'Level of education completed.', 'marital-education': 'Married or not - education.', 'targeted': 'If the customer is being targeted or not.', 'default': 'If the customer is in default list or not.', 'balance': 'Remaining balance in their accounts.', 'housing': 'Housing.', 'loan': 'Has prior loan or not.', 'contact': 'Source of this information.', 'day': \"Today's date.\", 'month': 'Month.', 'duration': 'Number of days.', 'campaign': 'Marketing campaign.', 'pdays': 'Number of days that passed by after the client was last contacted.', 'previous': 'Previous response.', 'poutcome': 'Outcome of the previous marketing campaign.'}\n\nDataframe header:\n|    |   age |   age group | eligible   | job          |   salary | marital   | education   | marital-education   | targeted   | default   |   balance | housing   | loan   | contact   |   day | month   |   duration |   campaign |   pdays |   previous | poutcome   |\\n|---:|------:|------------:|:-----------|:-------------|---------:|:----------|:------------|:--------------------|:-----------|:----------|----------:|:----------|:-------|:----------|------:|:--------|-----------:|-----------:|--------:|-----------:|:-----------|\\n|  0 |    58 |           5 | Y          | management   |   100000 | married   | tertiary    | married-tertiary    | yes        | no        |      2143 | yes       | no     | unknown   |     5 | may     |        261 |          1 |      -1 |          0 | unknown    |\\n|  1 |    44 |           4 | Y          | technician   |    60000 | single    | secondary   | single-secondary    | yes        | no        |        29 | yes       | no     | unknown   |     5 | may     |        151 |          1 |      -1 |          0 | unknown    |\\n|  2 |    33 |           3 | Y          | entrepreneur |   120000 | married   | secondary   | married-secondary   | yes        | no        |         2 | yes       | yes    | unknown   |     5 | may     |         76 |          1 |      -1 |          0 | unknown    |\\n|  3 |    47 |           4 | Y          | blue-collar  |    20000 | married   | unknown     | married-unknown     | no         | no        |      1506 | yes       | no     | unknown   |     5 | may     |         92 |          1 |      -1 |          0 | unknown    |\\n|  4 |    33 |           3 | Y          | unknown      |        0 | single    | unknown     | single-unknown      | no         | no        |         1 | no        | no     | unknown   |     5 | may     |        198 |          1 |      -1 |          0 | unknown    |'\n\nNow please write a single function in Python 3.7+ which takes in this dataframe as a single argument and returns a modified dataframe with new features. [/INST]"}
{"dataframe_id": "mirlei__hcc-survival-data-set.csv", "prompt": "[INST] You will be shown a dataset from a Kaggle competition. The competition is to build a classifier over this dataset such that it has the highest classification accuracy possible. Your task is to preprocess this dataset so that an existing model can improve its classification accuracy. You will be shown a general description of the dataset including a description of the classification task. This will be followed by a list of features and their descriptions. These features are available in a pandas DataFrame. You should output a single function in Python 3.7+ that will take this dataframe as input and return a modified dataframe with new features. New features can be formed by e.g. keeping the old features unchanged, creating interactions between features, preprocessing features, removing features.\n\nDataset description: Clinical data of 165 patients diagnosed with HCC.\n\nThe goal is to predict whether a patient will survive or not.\n\nDataframe features and their descriptions:\n{'1.Gen': 'Gender: nominal', '2.Sym': 'Symptoms: nominal', '3.Alc': 'Alcohol: nominal', '4.HepB': 'Hepatitis B Surface Antigen: nominal', '5.HepB': 'Hepatitis B e Antigen: nominal', '6.HepB': 'Hepatitis B Core Antibody: nominal', '7.HepC': 'Hepatitis C Virus Antibody: nominal', '8.Cir': 'Cirrhosis: nominal', '9.End': 'Endemic Countries: nominal', '10.Smo': 'Smoking: nominal', '11.Dia': 'Diabetes: nominal', '12.Obe': 'Obesity: nominal', '13.Hem': 'Hemochromatosis: nominal', '14.Art': 'Arterial Hypertension: nominal', '15.CRen': 'Chronic Renal Insufficiency: nominal', '16.HIV': 'Human Immunodeficiency Virus: nominal', '17.Non': 'Nonalcoholic Steatohepatitis: nominal', '18.EVar': 'Esophageal Varices: nominal', '19.Spl': 'Splenomegaly: nominal', '20.PHyp': 'Portal Hypertension: nominal', '21.Thr': 'Portal Vein Thrombosis: nominal', '22.LMet': 'Liver Metastasis: nominal', '23.Rad': 'Radiological Hallmark: nominal', '24.Agedia': 'Age at diagnosis: integer', '25.Alcpd': 'Grams of Alcohol per day: continuous', '26.cigpy': 'Packs of cigarets per year: continuous', '27.Sta': 'Performance Status: ordinal', '28.Encdeg': 'Encefalopathy degree: ordinal', '29.Ascdeg': 'Ascites degree: ordinal', '30.IntNorRat': 'International Normalised Ratio: continuous', '31.Alp': 'Alpha-Fetoprotein (ng/mL): continuous', '32.Hae': 'Haemoglobin (g/dL): continuous', '33.MCorVol': 'Mean Corpuscular Volume (fl): continuous', '34.Leu': 'Leukocytes(G/L): continuous', '35.Plat': 'Platelets (G/L): continuous', '36.Alb': 'Albumin (mg/dL): continuous', '37.Bil': 'Total Bilirubin(mg/dL): continuous', '38.Ala': 'Alanine transaminase (U/L): continuous', '39.Aspa': 'Aspartate transaminase (U/L): continuous', '40.Gam': 'Gamma glutamyl transferase (U/L): continuous', '41.Alk': 'Alkaline phosphatase (U/L): continuous', '42.Prot': 'Total Proteins (g/dL): continuous', '43.Crea': 'Creatinine (mg/dL): continuous', '44.NNod': 'Number of Nodules: integer', '45.dnod': 'Major dimension of nodule (cm): continuous', '46.Bil': 'Direct Bilirubin (mg/dL): continuous', '47.Iro': 'Iron (mcg/dL): continuous', '48.Oxy': 'Oxygen Saturation (%): continuous', '49.Fer': 'Ferritin (ng/mL): continuous'}\n\nDataframe header:\n|    |   1.Gen |   2.Sym |   3.Alc |   4.HepB |   5.HepB |   6.HepB |   7.HepC |   8.Cir |   9.End |   10.Smo |   11.Dia |   12.Obe |   13.Hem |   14.Art |   15.CRen |   16.HIV |   17.Non |   18.EVar |   19.Spl |   20.PHyp |   21.Thr |   22.LMet |   23.Rad |   24.Agedia |   25.Alcpd |   26.cigpy |   27.Sta |   28.Encdeg |   29.Ascdeg |    30.IntNorRat |    31.Alp |    32.Hae |    33.MCorVol |    34.Leu |   35.Plat |   36.Alb |   37.Bil |   38.Ala |   39.Aspa |   40.Gam |   41.Alk |   42.Prot |   43.Crea |   44.NNod |   45.dnod |   46.Bil |   47.Iro |   48.Oxy |   49.Fer |\\n|---:|--------:|--------:|--------:|---------:|---------:|---------:|---------:|--------:|--------:|---------:|---------:|---------:|---------:|---------:|----------:|---------:|---------:|----------:|---------:|----------:|---------:|----------:|---------:|------------:|-----------:|-----------:|---------:|------------:|------------:|----------------:|----------:|----------:|--------------:|----------:|----------:|---------:|---------:|---------:|----------:|---------:|---------:|----------:|----------:|----------:|----------:|---------:|---------:|---------:|---------:|\\n|  0 |       1 |       0 |       1 |        0 |        0 |        0 |        0 |       1 |       0 |        1 |        1 |      nan |        1 |        0 |         0 |        0 |        0 |         1 |        0 |         0 |        0 |         0 |        1 |          67 |        137 |         15 |        0 |           1 |           1 |            1.53 |      95   |      13.7 |         106.6 |       4.9 |        99 |      3.4 |      2.1 |       34 |        41 |      183 |      150 |       7.1 |      0.7  |         1 |       3.5 |      0.5 |      nan |      nan |      nan |\\n|  1 |       0 |     nan |       0 |        0 |        0 |        0 |        1 |       1 |     nan |      nan |        1 |        0 |        0 |        1 |         0 |        0 |        0 |         1 |        0 |         0 |        0 |         0 |        1 |          62 |          0 |        nan |        0 |           1 |           1 |          nan    |     nan   |     nan   |         nan   |     nan   |       nan |    nan   |    nan   |      nan |       nan |      nan |      nan |     nan   |    nan    |         1 |       1.8 |    nan   |      nan |      nan |      nan |\\n|  2 |       1 |       0 |       1 |        1 |        0 |        1 |        0 |       1 |       0 |        1 |        0 |        0 |        0 |        1 |         1 |        0 |        0 |         0 |        0 |         1 |        0 |         1 |        1 |          78 |         50 |         50 |        2 |           1 |           2 |            0.96 |       5.8 |       8.9 |          79.8 |       8.4 |       472 |      3.3 |      0.4 |       58 |        68 |      202 |      109 |       7   |      2.1  |         5 |      13   |      0.1 |       28 |        6 |       16 |\\n|  3 |       1 |       1 |       1 |        0 |        0 |        0 |        0 |       1 |       0 |        1 |        1 |        0 |        0 |        1 |         0 |        0 |        0 |         0 |        0 |         0 |        0 |         1 |        1 |          77 |         40 |         30 |        0 |           1 |           1 |            0.95 |    2440   |      13.4 |          97.1 |       9   |       279 |      3.7 |      0.4 |       16 |        64 |       94 |      174 |       8.1 |      1.11 |         2 |      15.7 |      0.2 |      nan |      nan |      nan |\\n|  4 |       1 |       1 |       1 |        1 |        0 |        1 |        0 |       1 |       0 |        1 |        0 |        0 |        0 |        1 |         1 |        0 |        0 |         0 |        0 |         0 |        0 |         0 |        1 |          76 |        100 |         30 |        0 |           1 |           1 |            0.94 |      49   |      14.3 |          95.1 |       6.4 |       199 |      4.1 |      0.7 |      147 |       306 |      173 |      109 |       6.9 |      1.8  |         1 |       9   |    nan   |       59 |       15 |       22 |'\n\nNow please write a single function in Python 3.7+ which takes in this dataframe as a single argument and returns a modified dataframe with new features. [/INST]"}
{"dataframe_id": "rohit265__breast-cancer-uci-machine-learning.csv", "prompt": "[INST] You will be shown a dataset from a Kaggle competition. The competition is to build a classifier over this dataset such that it has the highest classification accuracy possible. Your task is to preprocess this dataset so that an existing model can improve its classification accuracy. You will be shown a general description of the dataset including a description of the classification task. This will be followed by a list of features and their descriptions. These features are available in a pandas DataFrame. You should output a single function in Python 3.7+ that will take this dataframe as input and return a modified dataframe with new features. New features can be formed by e.g. keeping the old features unchanged, creating interactions between features, preprocessing features, removing features.\n\nDataset description: This data set contains data on 201 patients suffering from breast cancer. Each patient can be suffering from a recurring event of breast cancer or a non-recurring event of breast cancer. \n\nThe goal is to predict whether a given patient is suffering from a recurring event or a non-recurring event.\n\nDataframe features and their descriptions:\n{'Age': '10-19, 20-29, 30-39, 40-49, 50-59, 60-69, 70-79, 80-89, 90-99', 'Menopause': 'lt40, ge40, premeno', 'Tumor-size': '0-4, 5-9, 10-14, 15-19, 20-24, 25-29, 30-34, 35-39, 40-44, 45-49, 50-54, 55-59', 'Inv-nodes': '0-2, 3-5, 6-8, 9-11, 12-14, 15-17, 18-20, 21-23, 24-26, 27-29, 30-32, 33-35, 36-39', 'Node-caps': 'yes, no', 'Deg-malig': '1, 2, 3', 'Breast': 'left, right', 'Breast-quad': 'left-up, left-low, right-up, right-low, central', 'Irradiat': 'yes, no'}\n\nDataframe header:\n|    | Age   | Menopause   | Tumor-size   | Inv-nodes   | Node-caps   |   Deg-malig | Breast   | Breast-quad   | Irradiat   |\\n|---:|:------|:------------|:-------------|:------------|:------------|------------:|:---------|:--------------|:-----------|\\n|  0 | 30-39 | premeno     | 30-34        | 0-2         | no          |           3 | left     | left_low      | no         |\\n|  1 | 40-49 | premeno     | 20-24        | 0-2         | no          |           2 | right    | right_up      | no         |\\n|  2 | 40-49 | premeno     | 20-24        | 0-2         | no          |           2 | left     | left_low      | no         |\\n|  3 | 60-69 | ge40        | 15-19        | 0-2         | no          |           2 | right    | left_up       | no         |\\n|  4 | 40-49 | premeno     | 0-4          | 0-2         | no          |           2 | right    | right_low     | no         |'\n\nNow please write a single function in Python 3.7+ which takes in this dataframe as a single argument and returns a modified dataframe with new features. [/INST]"}
{"dataframe_id": "rishikeshkonapure__home-loan-approval.csv", "prompt": "[INST] You will be shown a dataset from a Kaggle competition. The competition is to build a classifier over this dataset such that it has the highest classification accuracy possible. Your task is to preprocess this dataset so that an existing model can improve its classification accuracy. You will be shown a general description of the dataset including a description of the classification task. This will be followed by a list of features and their descriptions. These features are available in a pandas DataFrame. You should output a single function in Python 3.7+ that will take this dataframe as input and return a modified dataframe with new features. New features can be formed by e.g. keeping the old features unchanged, creating interactions between features, preprocessing features, removing features.\n\nDataset description: This dataset contains data on home loan applicants. \n\nThe goal is to predict whether a given applicant is eligible for a home loan\n\nDataframe features and their descriptions:\n{'Loan_ID': 'Unique Loan ID', 'Gender': 'Male/ Female', 'Married': 'Applicant married (Y/N)', 'Dependents': 'Number of dependents', 'Education': 'Applicant Education (Graduate/ Under Graduate)', 'Self_Employed': 'Self-employed (Y/N)', 'ApplicantIncome': \"Applicant's income\", 'CoapplicantIncome': 'Co-applicant income', 'LoanAmount': 'Loan amount in thousands', 'Loan_Amount_Term': 'Term of the loan in months', 'Credit_History': 'credit history meets guidelines', 'Property_Area': 'Urban/ Semi Urban/ Rural'}\n\nDataframe header:\n|    | Loan_ID   | Gender   | Married   |   Dependents | Education    | Self_Employed   |   ApplicantIncome |   CoapplicantIncome |   LoanAmount |   Loan_Amount_Term |   Credit_History | Property_Area   |\\n|---:|:----------|:---------|:----------|-------------:|:-------------|:----------------|------------------:|--------------------:|-------------:|-------------------:|-----------------:|:----------------|\\n|  0 | LP001002  | Male     | No        |            0 | Graduate     | No              |              5849 |                   0 |          nan |                360 |                1 | Urban           |\\n|  1 | LP001003  | Male     | Yes       |            1 | Graduate     | No              |              4583 |                1508 |          128 |                360 |                1 | Rural           |\\n|  2 | LP001005  | Male     | Yes       |            0 | Graduate     | Yes             |              3000 |                   0 |           66 |                360 |                1 | Urban           |\\n|  3 | LP001006  | Male     | Yes       |            0 | Not Graduate | No              |              2583 |                2358 |          120 |                360 |                1 | Urban           |\\n|  4 | LP001008  | Male     | No        |            0 | Graduate     | No              |              6000 |                   0 |          141 |                360 |                1 | Urban           |'\n\nNow please write a single function in Python 3.7+ which takes in this dataframe as a single argument and returns a modified dataframe with new features. [/INST]"}
{"dataframe_id": "laotse__credit-card-approval.csv", "prompt": "[INST] You will be shown a dataset from a Kaggle competition. The competition is to build a classifier over this dataset such that it has the highest classification accuracy possible. Your task is to preprocess this dataset so that an existing model can improve its classification accuracy. You will be shown a general description of the dataset including a description of the classification task. This will be followed by a list of features and their descriptions. These features are available in a pandas DataFrame. You should output a single function in Python 3.7+ that will take this dataframe as input and return a modified dataframe with new features. New features can be formed by e.g. keeping the old features unchanged, creating interactions between features, preprocessing features, removing features.\n\nDataset description: This dataset contains data on credit card applicants. \n\nThe goal is to predict whether a given applicant is eligible for a credit card.\n\nDataframe features and their descriptions:\n{'ID': 'Client Number', 'CODE_GENDER': 'Gender', 'FLAG_OWN_CAR': 'Is there a car', 'FLAG_OWN_REALTY': 'Is there a property', 'CNT_CHILDREN': 'Number of Children', 'AMT_INCOME_TOTAL': 'Annual Income', 'NAME_EDUCATION_TYPE': 'Education Level', 'NAME_FAMILY_STATUS': 'Marital Status', 'NAME_HOUSING_TYPE': 'Way of Living', 'DAYS_BIRTH': 'Age in days', 'DAYS_EMPLOYED': 'Duration of work in days', 'FLAG_MOBIL': 'Is there a mobile phone', 'FLAG_WORK_PHONE': 'Is there a work phone', 'FLAG_PHONE': 'Is there a phone', 'FLAG_EMAIL': 'Is there an email', 'JOB': 'Job', 'BEGIN_MONTHS': 'Record month', 'STATUS': 'Status'}\n\nDataframe header:\n|    |      ID | CODE_GENDER   | FLAG_OWN_CAR   | FLAG_OWN_REALTY   | CNT_CHILDREN   |   AMT_INCOME_TOTAL | NAME_EDUCATION_TYPE           | NAME_FAMILY_STATUS   | NAME_HOUSING_TYPE   |   DAYS_BIRTH |   DAYS_EMPLOYED |   FLAG_MOBIL |   FLAG_WORK_PHONE |   FLAG_PHONE |   FLAG_EMAIL | JOB                   |   BEGIN_MONTHS | STATUS   |\\n|---:|--------:|:--------------|:---------------|:------------------|:---------------|-------------------:|:------------------------------|:---------------------|:--------------------|-------------:|----------------:|-------------:|------------------:|-------------:|-------------:|:----------------------|---------------:|:---------|\\n|  0 | 5065438 | F             | Y              | N                 | 2+ children    |             270000 | Secondary / secondary special | Married              | With parents        |       -13258 |           -2300 |            1 |                 0 |            0 |            0 | Managers              |             -6 | C        |\\n|  1 | 5142753 | F             | N              | N                 | No children    |              81000 | Secondary / secondary special | Single / not married | House / apartment   |       -17876 |            -377 |            1 |                 1 |            1 |            0 | Private service staff |             -4 | 0        |\\n|  2 | 5111146 | M             | Y              | Y                 | No children    |             270000 | Higher education              | Married              | House / apartment   |       -19579 |           -1028 |            1 |                 0 |            1 |            0 | Laborers              |              0 | C        |\\n|  3 | 5010310 | F             | Y              | Y                 | 1 children     |             112500 | Secondary / secondary special | Married              | House / apartment   |       -15109 |           -1956 |            1 |                 0 |            0 |            0 | Core staff            |             -3 | 0        |\\n|  4 | 5010835 | M             | Y              | Y                 | 2+ children    |             139500 | Secondary / secondary special | Married              | House / apartment   |       -17281 |           -5578 |            1 |                 1 |            0 |            0 | Drivers               |            -29 | 0        |'\n\nNow please write a single function in Python 3.7+ which takes in this dataframe as a single argument and returns a modified dataframe with new features. [/INST]"}
